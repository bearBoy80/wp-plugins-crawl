{"name":"WP Log in Browser","slug":"wp-log-in-browser","version":"0.1.2","author":"<a href=\"http:\/\/danieldvork.in\">Daniel Dvorkin<\/a>","author_profile":"https:\/\/profiles.wordpress.org\/mzaweb\/","contributors":{"mzaweb":{"profile":"https:\/\/profiles.wordpress.org\/mzaweb\/","avatar":"https:\/\/secure.gravatar.com\/avatar\/e59d0777ab3367f9f0716a34cf0f2519?s=96&d=monsterid&r=g","display_name":"Daniel Dvorkin"}},"requires":"3.4","tested":"3.5.2","requires_php":false,"requires_plugins":[],"rating":0,"ratings":{"5":0,"4":0,"3":0,"2":0,"1":0},"num_ratings":0,"support_threads":0,"support_threads_resolved":0,"active_installs":10,"last_updated":"2012-12-17 12:54pm GMT","added":"2012-12-17","homepage":"","sections":{"description":"<p>I&#8217;m working on a nice admin screen to config auto-logging of some common things (like wp_query in pre_get_posts and wp), and some other goodies.<\/p>\n<p>To log things manually, you can use:<\/p>\n<pre><code>browser()-&gt;log  ( $var, $label );\nbrowser()-&gt;warn ( $var, $label );\nbrowser()-&gt;info ( $var, $label );\nbrowser()-&gt;error( $var, $label );\n<\/code><\/pre>\n<p>Also, commandas are chainable:<\/p>\n<pre><code>browser()-&gt;log( 'This is a log...' )-&gt;error( '...and this is an error' );\n<\/code><\/pre>\n<p>For example, to log all your main query&#8217;s query_vars:<\/p>\n<pre><code>add_filter( 'pre_get_posts', 'log_wp_query', 10000 );\n\nfunction log_wp_query( $query ) {\n    if ( $query-&gt;is_main_query() )\n        browser()-&gt;log( $query-&gt;query_vars, 'pre_get_posts' );\n\n    return $query;\n}\n<\/code><\/pre>\n<h4>Filters<\/h4>\n<p><em>wplinb-match-wp-debug<\/em>: Set to true to only log when wp_debug is true. To prevent logging when wp_debug is false:<\/p>\n<pre><code>add_filter( 'wplinb-match-wp-debug', '__return_true' );\n<\/code><\/pre>\n<p><em>wplinb-enabled<\/em>: To disable logging completely. It takes precedence over <em>wplinb-match-wp-debug<\/em>. To disable logging:<\/p>\n<pre><code>add_filter( 'wplinb-enabled', '__return_false' );\n<\/code><\/pre>\n<h4>Profiling<\/h4>\n<p>The plugin includes a really simple function to allow you to track execution time of different parts of your code.<\/p>\n<pre><code>browser()-&gt;timer( $key, $log = false );\n<\/code><\/pre>\n<p>The first time you call this function with a given $key (string) it will start a timer, and return false. You can start as many timers as you want, using different $key values. You can ignore the second parameter for this first call.<\/p>\n<p>The second time you call this function with a given $key, it will return the ellapsed time in seconds since you started this $key timer. If you set the second parameter to true, it will also log this value to the browser.<\/p>\n<p>Example 1: Sequential use, log manually.<\/p>\n<pre><code>browser()-&gt;timer( 'Mega loop' );\nfor ( $i = 0; $i &lt; 1000000; $i++ ) {\n    \/\/do something\n}\n$time = browser()-&gt;timer( 'Mega loop' );\nbrowser()-&gt;log( $time, 'The mega loop took:' );\n<\/code><\/pre>\n<p>Example 2: Start and end in different places, log automatically.<\/p>\n<pre><code>add_action( 'posts_selection', 'start_timer', 100 );\nadd_filter( 'the_posts', 'end_timer', 1, 2 );\n\nfunction start_timer( $query ) {\n    browser()-&gt;timer( 'Main query time' );\n}\n\nfunction end_timer( $posts, $query ) {\n    browser()-&gt;timer( 'Main query time', true );\n    return $posts;\n}\n<\/code><\/pre>\n<p><em>This is not a good way of measuring how much time a query takes to run, it&#8217;s just to illustrate how to use the timer.<\/em><\/p>\n<p>In exactly the same way, you can use the function<\/p>\n<pre><code>Browser()-&gt;memory( $key, $log = false );\n<\/code><\/pre>\n<p>to measure delta of memory consumption from your first call and your second call with the same $key.<\/p>\n<p>Example:<\/p>\n<pre><code>Browser()-&gt;memory( 'testing' );\n$test = array();\nfor ( $i = 0; $i &lt; 100; $i++ ) {\n    $test[$i] = md5( rand( 1, $i ) );\n}\nBrowser()-&gt;memory( 'testing', true );\n\n\nBrowser()-&gt;memory( 'testing' );\n$test = array();\nfor ( $i = 0; $i &lt; 10000; $i++ ) {\n    $test[$i] = md5( rand( 1, $i ) );\n}\nBrowser()-&gt;memory( 'testing', true );\n<\/code><\/pre>\n","installation":"<p>For Chrome you need to install the <a href=\"http:\/\/www.chromephp.com\/\" rel=\"nofollow ugc\">ChromePHP<\/a> extension.<br \/>\nFor Firefox you need to install both the <a href=\"http:\/\/getfirebug.com\/\" rel=\"nofollow ugc\">FireBug<\/a> and <a href=\"http:\/\/www.firephp.org\/\" rel=\"nofollow ugc\">FirePHP<\/a> extensions.<\/p>\n<ol>\n<li>Upload to the <code>\/wp-content\/plugins\/<\/code> directory<\/li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress<\/li>\n<\/ol>\n","changelog":"<h4>0.1.2<\/h4>\n<ul>\n<li>Fix output buffering. It was failing in some scenarios.<\/li>\n<li>Added timer function to easily profile execution time.<\/li>\n<li>Added memory function to easily profile memory consumption.<\/li>\n<\/ul>\n<h4>0.1.1<\/h4>\n<ul>\n<li>Fix case on include for ChromePhp (props faction23)<\/li>\n<li>Make the logger work from an AJAX handler<\/li>\n<li>Add filter <em>wplinb-match-wp-debug<\/em> to log only when wp_debug is on<\/li>\n<li>Add filter <em>wplinb-enabled<\/em> to disable logging completely. It has precedence over <em>wplinb-match-wp-debug<\/em><\/li>\n<\/ul>\n<h4>0.1<\/h4>\n<ul>\n<li>First release<\/li>\n<\/ul>\n","reviews":""},"download_link":"https:\/\/downloads.wordpress.org\/plugin\/wp-log-in-browser.0.1.2.zip","screenshots":[],"tags":{"console":"console","debug":"debug","develop":"develop"},"versions":{"0.1.2":"https:\/\/downloads.wordpress.org\/plugin\/wp-log-in-browser.0.1.2.zip","trunk":"https:\/\/downloads.wordpress.org\/plugin\/wp-log-in-browser.zip"},"donate_link":"http:\/\/danieldvork.in\/","banners":{"low":"https:\/\/ps.w.org\/wp-log-in-browser\/assets\/banner-772x250.jpg?rev=640497","high":false}}