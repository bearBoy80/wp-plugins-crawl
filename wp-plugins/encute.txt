{"name":"Encute","slug":"encute","version":"0.8.8","author":"Mark Jaquith","author_profile":"https:\/\/profiles.wordpress.org\/markjaquith\/","contributors":{"markjaquith":{"profile":"https:\/\/profiles.wordpress.org\/markjaquith\/","avatar":"https:\/\/secure.gravatar.com\/avatar\/31c9246c917b5a53e34ae693b37840ac?s=96&d=monsterid&r=g","display_name":"Mark Jaquith"}},"requires":"5.8","tested":"5.8.8","requires_php":"7.4","requires_plugins":[],"rating":80,"ratings":{"5":0,"4":1,"3":0,"2":0,"1":0},"num_ratings":1,"support_threads":0,"support_threads_resolved":0,"active_installs":20,"last_updated":"2022-02-17 8:29pm GMT","added":"2021-10-26","homepage":"","sections":{"description":"<p>Encute provides a fluent, declarative API for site owners to manipulate the scripts and styles that WordPress, themes, and plugins shove onto their site. Move things into the footer, defer loading, remove assets entirely. Or load scripts async, or as modules, or as nomodule!<\/p>\n<p>Here&#8217;s an example of how you could use the plugin:<\/p>\n<pre><code>&lt;?php\n\nuse CWS\\Encute\\{ Plugin, Script, Style };\n\nadd_action(Plugin::class, function (Plugin $plugin) {\n    $isContactPage = fn () =&gt; is_page('contact');\n    Script::get('contact-form-7')-&gt;keepIf($isContactPage)-&gt;footer()-&gt;defer();\n    Style::get('contact-form-7')-&gt;keepIf($isContactPage)-&gt;footer()-&gt;defer();\n\n    Style::get(['mediaelement', 'wp-mediaelement'])-&gt;footer()-&gt;defer();\n    Style::get('material-icons')-&gt;defer();\n    Script::get('jquery')-&gt;remove();\n});\n<\/code><\/pre>\n<h3>Wrapper<\/h3>\n<p>Always run code in this wrapper:<\/p>\n<pre><code>add_action(\\CWS\\Encute\\Plugin::class, function (\\CWS\\Encute\\Plugin $encute) {\n    \/\/ Your code here.\n});\n<\/code><\/pre>\n<p>This wrapper will be a no-op if Encute is not available, and it will both wait for Encute to be available to run, and pass you Encute&#8217;s main class instance.<\/p>\n<h3>Fluency<\/h3>\n<p>Both <code>Script::get()<\/code> and <code>Style::get()<\/code> return an instance of themselves, as do all calls to their methods, so you can just chain your calls.<\/p>\n<h3>Script<\/h3>\n<ul>\n<li><code>static CWS\\Encute\\Script::get(string $handle): CWS\\Encute\\Script<\/code> \u2014 get a Script instance for that handle.<\/li>\n<li><code>CWS\\Encute\\Script::module(): CWS\\Encute\\Script<\/code> \u2014 make the script a module.<\/li>\n<li><code>CWS\\Encute\\Script::noModule(): CWS\\Encute\\Script<\/code> \u2014 make the script nomodule.<\/li>\n<li><code>CWS\\Encute\\Script::footer(): CWS\\Encute\\Script<\/code> \u2014 send the script to the footer (along with its entire dependency family).<\/li>\n<li><code>CWS\\Encute\\Script::async(): CWS\\Encute\\Script<\/code> \u2014 make the script async.<\/li>\n<li><code>CWS\\Encute\\Script::defer(): CWS\\Encute\\Script<\/code> \u2014 make the script defer.<\/li>\n<li><code>CWS\\Encute\\Script::remove(): CWS\\Encute\\Script<\/code> \u2014 remove the script.<\/li>\n<li><code>CWS\\Encute\\Script::removeIf(callable $callback): CWS\\Encute\\Script<\/code> \u2014 remove the script if the callback resolves as true.<\/li>\n<li><code>CWS\\Encute\\Script::keepIf(callable $callback): CWS\\Encute\\Script<\/code> \u2014 keep the script if the callback resolves as true (else remove it).<\/li>\n<\/ul>\n<h3>Style<\/h3>\n<ul>\n<li><code>static CWS\\Encute\\Style::get(string $handle): CWS\\Encute\\Style<\/code> \u2014 get a Style instance for that handle.<\/li>\n<li><code>CWS\\Encute\\Style::footer(): CWS\\Encute\\Style<\/code> \u2014 send the style to the footer (along with its entire dependency family).<\/li>\n<li><code>CWS\\Encute\\Style::defer(): CWS\\Encute\\Style<\/code> \u2014 defer the style&#8217;s loading.<\/li>\n<li><code>CWS\\Encute\\Style::remove(): CWS\\Encute\\Style<\/code> \u2014 remove the style.<\/li>\n<li><code>CWS\\Encute\\Style::removeIf(callable $callback): CWS\\Encute\\Style<\/code> \u2014 remove the style if the callback resolves as true.<\/li>\n<li><code>CWS\\Encute\\Style::keepIf(callable $callback): CWS\\Encute\\Style<\/code> \u2014 keep the style if the callback resolves as true (else remove it).<\/li>\n<\/ul>\n","faq":"\n<dt id='how%20do%20i%20use%20this%3F'>\nHow do I use this?\n<\/h4>\n<p>\n<p>Go to Tools &gt; Encute and you&#8217;ll be guided through code generation.<\/p>\n<\/p>\n<dt id='can%27t%20i%20do%20this%20through%20a%20ui%3F'>\nCan&#8217;t I do this through a UI?\n<\/h4>\n<p>\n<p>Not currently. This is a pro-level tool. You need to know what you&#8217;re doing. If writing code isn&#8217;t for you, then this plugin probably isn&#8217;t for you.<\/p>\n<\/p>\n\n","screenshots":"<ol><li><a href=\"https:\/\/ps.w.org\/encute\/assets\/screenshot-1.png?rev=2621007\"><img src=\"https:\/\/ps.w.org\/encute\/assets\/screenshot-1.png?rev=2621007\" alt=\"Code generation inside the plugin.\"><\/a><p>Code generation inside the plugin.<\/p><\/li><\/ol>","reviews":"<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Useful tool<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"4 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"4\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-empty\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/a2d\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/7f367ac4bca8fab1fa842389ed4091b7?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/7f367ac4bca8fab1fa842389ed4091b7?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/a2d\/\" class=\"reviewer-name\">a2d<\/a> on <span class=\"review-date\">December 12, 2021<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\">Given 4 stars because early days with this plugin, but it does it's job and gives full control of scripts\/styles which many free plugins don't.\n\nThere's a few points that might not be clear from the documentation:\n<ol>\n<li>The 'plugin' requires PHP 7.4 or higher<\/li>\n<li>If you don't have a directory at \/wp-content\/mu-plugins then create one and put encute.php in it<\/li>\n<li>At first, tick the \"Show debug HTML comments around scripts and styles\" checkbox. \n This outputs useful comments around script and style blocks with the <strong>handle<\/strong> of each. You need this handle to set up 'rules'.<\/li>\n<\/ol>\n\nThe plugin works fine and the code generation tool is useful, but doesn't remember 'rules' you add. Would be useful if the plugin had a link (in new window) to the plugin description page for code reference\n\n<\/div>\n<\/div>\n"},"download_link":"https:\/\/downloads.wordpress.org\/plugin\/encute.0.8.8.zip","screenshots":{"1":{"src":"https:\/\/ps.w.org\/encute\/assets\/screenshot-1.png?rev=2621007","caption":"Code generation inside the plugin."}},"tags":{"performance":"performance","scripts":"scripts","styles":"styles"},"versions":{"0.8.3":"https:\/\/downloads.wordpress.org\/plugin\/encute.0.8.3.zip","0.8.4":"https:\/\/downloads.wordpress.org\/plugin\/encute.0.8.4.zip","0.8.5":"https:\/\/downloads.wordpress.org\/plugin\/encute.0.8.5.zip","0.8.6":"https:\/\/downloads.wordpress.org\/plugin\/encute.0.8.6.zip","0.8.7":"https:\/\/downloads.wordpress.org\/plugin\/encute.0.8.7.zip","0.8.8":"https:\/\/downloads.wordpress.org\/plugin\/encute.0.8.8.zip","trunk":"https:\/\/downloads.wordpress.org\/plugin\/encute.zip"},"donate_link":"","banners":{"low":"https:\/\/ps.w.org\/encute\/assets\/banner-772x250.png?rev=2620522","high":"https:\/\/ps.w.org\/encute\/assets\/banner-1544x500.png?rev=2620522"}}