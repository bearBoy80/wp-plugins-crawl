{"name":"AJAX Manufactory","slug":"ajax-manufactory","version":"1.7.11","author":"<a href=\"http:\/\/e-wm.org\/\">Epsilon Web Manufactory<\/a>","author_profile":"https:\/\/profiles.wordpress.org\/epsiloncool\/","contributors":{"epsiloncool":{"profile":"https:\/\/profiles.wordpress.org\/epsiloncool\/","avatar":"https:\/\/secure.gravatar.com\/avatar\/45d6983a995a614236a2b923417d3761?s=96&d=monsterid&r=g","display_name":"Epsiloncool"}},"requires":"3.0.1","tested":"5.2.19","requires_php":false,"requires_plugins":[],"rating":100,"ratings":{"5":5,"4":0,"3":0,"2":0,"1":0},"num_ratings":5,"support_threads":1,"support_threads_resolved":0,"active_installs":200,"last_updated":"2019-06-28 12:19am GMT","added":"2015-09-07","homepage":"http:\/\/e-wm.org\/ajax-manufactory\/","sections":{"description":"<p>Whenever you plan to begin developing applications on WordPress using AJAX technology, you have to solve a number of<br \/>\nminor issues unrelated to the logic of your application:<\/p>\n<ul>\n<li>How to package and transmit data from the browser to the server, so they will not have been distorted?<\/li>\n<li>How to transfer data, if they are multi-dimensional array?<\/li>\n<li>How to implement a custom processing of AJAX response in case, again, it represents a complex set of data (a typical<br \/>\nexample &#8211; form sending and on-server validation)?<\/li>\n<li>How to handle data transition errors?<\/li>\n<li>How to debug all this stuff?<\/li>\n<\/ul>\n<p>Usually these issues generates a lot of spaghetti code, moreover, each new request type requires some customization of<br \/>\ncode. Managing all of this, you forget about the function that you would like to implement.<\/p>\n<p>AJAX Manufactory plugin for WordPress have most of these tasks already solved. You can think about functionality and<br \/>\nbusiness logic instead.<\/p>\n<p>What you can have from the box:<\/p>\n<ul>\n<li>A simple function at the client side which allows to send any your complex data from javascript to WordPress server<br \/>\nside.<\/li>\n<li>An AJAX response wrapper at the server side which gives to you sent data as PHP array and allows you to create<br \/>\nan AJAX response as a set of simple &#8220;commands&#8221; like &#8220;make an alert&#8221;, &#8220;set up javascript variable&#8221;, &#8220;put html text to<br \/>\nspecific html node(s)&#8221;, &#8220;execute a javascript function&#8221;, &#8220;go to specific URL&#8221; etc.<\/li>\n<li>Automatic execution of &#8220;commands&#8221; queue at the client side. Additionally you can specify your own callback.<\/li>\n<\/ul>\n<h4>Documentation<\/h4>\n<p>Please refer <a href=\"http:\/\/e-wm.org\/ajax-manufactory\/#documentation\" title=\"AJAX Manufactory Documentation\" rel=\"nofollow ugc\">Documentation<\/a>.<\/p>\n","installation":"<ol>\n<li>Unpack and upload <code>ajax-manufactory<\/code> folder with all files to the <code>\/wp-content\/plugins\/<\/code> directory<\/li>\n<li>Activate the plugin through the &#8216;Plugins&#8217; menu in WordPress<\/li>\n<\/ol>\n","faq":"\n<h4>Where can I put some notices, comments or bugreports?<\/h4>\n<p>\n<p>Do not hesistate to write to us at <a href=\"http:\/\/e-wm.org\/contact\/\" title=\"Contact Us\" rel=\"nofollow ugc\">Contact Us<\/a> page.<\/p>\n<\/p>\n\n","changelog":"<h4>1.7.11<\/h4>\n<ul>\n<li>Changed name back (it was prohibited)<\/li>\n<\/ul>\n<h4>1.7.10<\/h4>\n<ul>\n<li>Changed name<\/li>\n<li>Lots of fixes planned<\/li>\n<\/ul>\n<h4>1.6.5<\/h4>\n<ul>\n<li>Fixed logos<\/li>\n<\/ul>\n<h4>1.6.4<\/h4>\n<ul>\n<li>Fixed a bug with &#8216;data&#8217; parameter of jxAction() function (it become optional)<\/li>\n<\/ul>\n<h4>1.6.3<\/h4>\n<ul>\n<li>Added new method variables() to set bunch of variables simultaneously<\/li>\n<li>Added new method trigger() to trigger jQuery event on the client side (with parameters)<\/li>\n<\/ul>\n<h4>1.6.2<\/h4>\n<ul>\n<li>Added named global triggers to track AJAX activity: jx_start_, jx_success_, jx_finish_, jx_error_<\/li>\n<\/ul>\n<h4>1.6.1<\/h4>\n<ul>\n<li>Fix for WP 4.8.1 compatibility<\/li>\n<\/ul>\n<h4>1.6<\/h4>\n<ul>\n<li>Added global triggers (at document level) to track AJAX activity: jx_start, jx_finish, jx_success, jx_error<\/li>\n<\/ul>\n<h4>1.5.2.6<\/h4>\n<ul>\n<li>Fixed data collection from forms by jxFormData() method. Especially for checkbox lists and radio lists.<\/li>\n<\/ul>\n<h4>1.5.2.4<\/h4>\n<ul>\n<li>New method call() was added. Read doc for details.<\/li>\n<\/ul>\n<h4>1.5.2.3<\/h4>\n<ul>\n<li>Added new flag &#8220;has_priv&#8221; in JX class<\/li>\n<\/ul>\n<h4>1.5.2.1<\/h4>\n<ul>\n<li>Fixed version number in core file<\/li>\n<\/ul>\n<h4>1.5.1.1<\/h4>\n<ul>\n<li>Now working at admin side too<\/li>\n<\/ul>\n<h4>1.5.0.1<\/h4>\n<ul>\n<li>Some security bugs was fixed.<\/li>\n<\/ul>\n<h4>1.5<\/h4>\n<ul>\n<li>console() method added<\/li>\n<li>redirect() method has been fixed<\/li>\n<li>javascript module completely redone.<\/li>\n<\/ul>\n<h4>1.1<\/h4>\n<ul>\n<li>Full Documentation has been added<\/li>\n<li>variable() method added<\/li>\n<\/ul>\n<h4>1.0<\/h4>\n<ul>\n<li>First WordPress version<\/li>\n<\/ul>\n<h4>0.4<\/h4>\n<ul>\n<li>html(), redirect(), reload() methods were added.<\/li>\n<\/ul>\n<h4>0.1<\/h4>\n<ul>\n<li>Initial edition. Only conception is implemented with alert() method on-board.<\/li>\n<\/ul>\n","reviews":"<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Good!<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/nik55555\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/46b014a6f6403b4ba6b984aadf5ab78a?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/46b014a6f6403b4ba6b984aadf5ab78a?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/nik55555\/\" class=\"reviewer-name\">nik55555<\/a> on <span class=\"review-date\">August 11, 2018<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\">Excelent!<\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">No actual documentation!<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/zogthefuzzy\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/94a0234b102e91d004f73e3ad38e590f?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/94a0234b102e91d004f73e3ad38e590f?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/zogthefuzzy\/\" class=\"reviewer-name\">zogthefuzzy<\/a> on <span class=\"review-date\">February 10, 2017<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\">I found this plugin to be very exasperating, because the only documentation it has is how to install it. There is NOTHING on how to actually use it. One BIG thumb down.<\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Awesome stuff!<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/bones852\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/bd6125d2c6d6d985541191de4b38fc8d?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/bd6125d2c6d6d985541191de4b38fc8d?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/bones852\/\" class=\"reviewer-name\">bones852<\/a> on <span class=\"review-date\">September 3, 2016<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\"><p>Very elegant solution. Working with a lot of ajax was pretty boring, but now it's not.<br \/>\nThank you!\n<\/p>\n<\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Good plugin, saves time and pretty easy to use.<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/ai1dro0knotbot\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/ec09e63f9c06e78f52d1696fa751fff4?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/ec09e63f9c06e78f52d1696fa751fff4?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/ai1dro0knotbot\/\" class=\"reviewer-name\">ai1dro0knotbot<\/a> on <span class=\"review-date\">September 3, 2016<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\"><p>I found this plugin when I was trying to develop ajax content update with built in wordpress tools.<br \/>\nMostly syntax is pretty straightforward and self explanatory.<br \/>\nTricky part is when you need to pass variables back to page.<br \/>\nLuckily plugin developer appeared very nice person and pointed me how to use plugin nice and easy.<br \/>\nNow here's the trick:<br \/>\nSay, we want send two variables to php side, process that data and show alert only for birds.<br \/>\n<em>Note: you can change \"myaction\" to whatever you like.<\/em><br \/>\nOn html side we embed javaScript:<br \/>\n<pre><code>jxAction(&#039;myaction&#039;, {&#039;variable_name&#039;: &#039;apples&#039;,&#039;another_variable&#039;: &#039;penguins&#039;}, function(v){\n     alert(v[&#039;birds&#039;]);\n});<\/code><\/pre>\n<p>On php side in functions.php we add action hook:<br \/>\n<pre><code>add_action(&#039;jx_myaction&#039;, function($jx){\n    $data = $jx-&gt;data; \/\/this is array with our variables\n    $bird = &#039;penguins&#039;;\n    foreach ( $data as current_var ) {\n        \/\/ here we write desired values to array that will be returned.\n        if ( $current_var == $bird ) $jx-&gt;variable(&#039;birds&#039;, $fname);\n    }\n});<\/code><\/pre>\n<p>That's pretty much it. <\/p>\n<p>p.s. <strong>IMPORTANT<\/strong>! In case of error on php side, you might get \"Wrong jx JSON response (not JSON)\" message. Then you should check webserver logs for errors.<\/p>\n<p>My recommendations, five stars.\n<\/p>\n<\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">This methodology is good<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/epsiloncool\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/45d6983a995a614236a2b923417d3761?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/45d6983a995a614236a2b923417d3761?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/epsiloncool\/\" class=\"reviewer-name\">Epsiloncool<\/a> on <span class=\"review-date\">September 3, 2016<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\"><p>Putting \"interface part\" out of your mind, you can always concentrate on the logic itself. It is increasing programming productivity and lower human errors.\n<\/p>\n<\/div>\n<\/div>\n"},"download_link":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.zip","screenshots":[],"tags":{"ajax":"ajax","client-side":"client side","request":"request","server-side":"server side","xmlrequest":"xmlrequest"},"versions":{"1.5.0.1":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.1.5.0.1.zip","1.5.1.1":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.1.5.1.1.zip","1.5.2.1":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.1.5.2.1.zip","1.5.2.3":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.1.5.2.3.zip","1.5.2.4":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.1.5.2.4.zip","1.5.2.5":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.1.5.2.5.zip","1.5.2.6":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.1.5.2.6.zip","1.5.2.7":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.1.5.2.7.zip","1.6":"https:\/\/downloads.wordpress.org\/plugin\/ajax-manufactory.1.6.zip"},"donate_link":"http:\/\/e-wm.org\/","banners":{"low":"https:\/\/ps.w.org\/ajax-manufactory\/assets\/banner-772x250.png?rev=1737606","high":false}}