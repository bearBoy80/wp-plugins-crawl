{"name":"Code Block ScratchPad","slug":"acb-scratchpad","version":"1.0.1","author":"Alan C Brown","author_profile":"https:\/\/profiles.wordpress.org\/acerby\/","contributors":{"acerby":{"profile":"https:\/\/profiles.wordpress.org\/acerby\/","avatar":"https:\/\/secure.gravatar.com\/avatar\/4cac4a22089454eba0769ab47031a546?s=96&d=monsterid&r=g","display_name":"Alan C Brown"}},"requires":"4.7","tested":"5.4.14","requires_php":false,"requires_plugins":[],"rating":0,"ratings":{"5":0,"4":0,"3":0,"2":0,"1":0},"num_ratings":0,"support_threads":0,"support_threads_resolved":0,"active_installs":0,"last_updated":"2020-11-25 7:26pm GMT","added":"2020-08-21","homepage":"","sections":{"description":"<p>This plug-in makes it simple to test and\/or install small wordpress PHP\/JS\/CSS code snippets in a relatively safe manner without the need to use a full PHP debugger or directly edit pre-existing plugin code.<\/p>\n<h3>Basic Features<\/h3>\n<ul>\n<li>Enter simple PHP\/JS expressions and quickly evaluate them to verify they function as expected.<\/li>\n<li>Create\/install top-level php functions eg: for use in wordpress pod fields.<\/li>\n<li>Add bespoke code and associate them with wordpress action\/filters <\/li>\n<li>Do almost anything that&#8217;s possible with a wordpress plugin<\/li>\n<li>Test and add custom javascript and CSS to website pages <\/li>\n<li>Preview the effects of changes before commiting in wordpress preview mode<\/li>\n<li>Provides protection against inadvertently killing sites due to basic coding errors<\/li>\n<\/ul>\n","installation":"<ol>\n<li>Upload acb-scratchpad to the \/wp-content\/plugins\/ directory.<\/li>\n<li>Activate Code Block Scratchpad through the &#8216;Plugins&#8217; menu in WordPress.<\/li>\n<li>Select the Code Block Scratchpad menu item in the admin pages and enter a simple expression and press the Check\/Run button.<\/li>\n<\/ol>\n","faq":"\n<h4>\nShould I get\/use this Plugin?\n<\/h4>\n<p>\n<p>If you are writing (or intending to write) PHP code and are looking for some quick\/easy way to test existing PHP code, or add a tiny snippet of code to an existing web site, then (hopefully) YES.<br \/>\nIf however you are trying to make a page look different, display a field etc, then I would generally recommend looking elsewhere in the first instance. There are a lot of great plugins that provide nice friendly interfaces for modifying the presentation of content and adding new fields\/features.<br \/>\nThis plugin gives access to the low-level PHP &amp; Javascript code that powers wordpress enabling you to do almost anything thats possible in wordpress. However, it&#8217;s just a basic low-level tool and doesn&#8217;t provide any ready-made solutions, relying on the user having knowledge how to program in PHP for wordpress.<br \/>\nWhilst using this plugin does include some basic safety measures and using it may be a lot simpler than creating your own plugin, please note that it can?t entirely protect you from the effects of bad code, and it?s very far removed from a full development environment.<\/p>\n<\/p>\n<h4>\nCan I do &#8230; with this plugin\n<\/h4>\n<p>\n<p>The answer is almost certainly Yes &#8211; However you are probably asking the wrong question &#8212; Please see: &#8220;Should I get\/use this plugin&#8221; and &#8220;What this plug is for&#8221;.<\/p>\n<\/p>\n<h4>\nWhat is this plugin for? \/ Why was it created?\n<\/h4>\n<p>\n<p>This plugin was initially created as an aid to creating a second more complex plugin. One of the issues of creating plugins is testing the PHP code being written and investigating\/verifying how pre-existing wordpress functionality works.<br \/>\nI wanted a simple way to test\/run PHP code that could interact with existing code, but without the otherwise ever-present risk that I could totally kill the whole website including the admin pages simply by inadvertently introducing a minor syntax error.<br \/>\nThere are some great on-line scratchpads for testing standalone PHP code snippets but these obviously can be used to test functionality specific to be environment. This add-in has proven very useful to me in this regard and so I thought\/hoped it may prove useful to others with similar needs.<\/p>\n<p>A secondary aim was related to an issue I had faced previously working on another website, where I needed a very tiny fragment of PHP code to achieve my goal.<br \/>\nHowever, there was no easy\/safe way to do that directly so I was forced into creating a complete bespoke plugin to add one simple line of php code.<br \/>\nGiven that it was totally specific to that web site, that seemed like an unnecessarily large overhead to achieve something so simple.<br \/>\nIn fact, it turned out that the biggest issue wasn&#8217;t the creation of the tiny bespoke plugin, but the issue of added complexity\/risks created for site maintenance going forward.<br \/>\nThis add-in hopefully makes creating\/administration and ongoing managment including minor tweaks to the PHP code snippet, a lot more simple, transparent, and less risky.<\/p>\n<\/p>\n<h4>\nWhere has the Publish Button Gone?\n<\/h4>\n<p>\n<p>To install PHP\/JS code, first press the &#8220;Check\/Run&#8221; button to verify the code is syntactically valid. Then assuming it is fine the &#8220;Publish&#8221; button will be displayed.<br \/>\nThe publish button will cause the displayed code to be installed and be made available to all pages in the site, replacing any version previously installed via this method.<\/p>\n<\/p>\n<h4>\nI just checked\/published some PHP code and now all I can see is a fatal parser\/syntax error message!!!\n<\/h4>\n<p>\n<p>Don&#8217;t panic! &#8212; Just make a note of the error message. If it gives a line number in eval()&#8217;d code make sure to make a note of that also. Then simply refresh the page.<br \/>\nThe scratchpad plugin will automatically disable any code that previously bailed out with a fatal error, so that it wont auto-run in the future.<\/p>\n<\/p>\n<h4>\nWhy does my page look different in preview mode?\n<\/h4>\n<p>\n<p>WordPress includes the facility to view web-site pages in &#8220;preview&#8221; mode.<br \/>\nThe scratchpad plugin will use the PHP\/JS\/CSS code currently displayed in the settings page as opposed to the currently installed code when displaying content in preview mode.<\/p>\n<\/p>\n<h4>\nWhen exactly will the PHP code I publish be run?\n<\/h4>\n<p>\n<p>The PHP code is triggered\/run by upon the wordpress &#8216;plugins_loaded&#8217; event. So it&#8217;s run in approximately the same time\/context as the intial plugin code is run.<br \/>\nYou can use the wordpress add_action(&#8230;) or add_filter(&#8230;) functions to have your code run\/applied to specific times\/events.<\/p>\n<\/p>\n<h4>\nWhats with the \/** [ Test Code ] **\/ thing?\n<\/h4>\n<p>\n<p>There are two primary uses of this codepad: The first of these is testing code eg evaluating an expression and seeing what it returns, the second is adding code\/functions that will be utilised later when displaying website pages.<br \/>\nOften these two functions may be combined so we may defined some functions and then have some additional code to test those functions. In these cases the \/** [ Test Code ] <strong>\/ comment may be used to separate these two code blocks.<br \/>\nWhen publishing code, if a \/<\/strong> [ Test Code ] **\/ comment appears in the source then only the part of the code above that comment will be published\/installed.<\/p>\n<\/p>\n<h4>\nHow can I pass values from PHP to javascript or CSS\n<\/h4>\n<p>\n<p>You can set values in the global $acb_scratchpad_var eg $acb_scratchpad_var[&#8216;myVarName&#8217;]=$myValue; then this will be available in javascript as acb_scratchpad_var[&#8216;myVarName&#8217;];<br \/>\nIf you whish to send things related to the current wordpress page\/post then you may want to ensure that your PHP code only runs once wordpress is fully loaded using add_action(&#8216;wp_loaded&#8217;,&#8217;name_of_my_php_fuction_to_get_and_set_vars&#8217;); or similar.<br \/>\nItems in $acb_scratchpad_var whose names start with &#8216;&#8211;&#8216; will additionally be defined as css vars values.<br \/>\nAlternatively for cleaner\/improved syntax you could use LESS format eg by using the https:\/\/wordpress.org\/plugins\/wp-less plugin.<\/p>\n<\/p>\n<h4>\nMy previously published\/installed code is now no longer being run &#8211; what happened?\n<\/h4>\n<p>\n<p>Scratchpad includes a protection mechanism to stop flawed\/fault code from permanently breaking the web-site and its administration pages.<br \/>\nIn the event that scratchpad installed code aborts and doesn?t complete scratchpad will leave the script in a disabled state such that it won&#8217;t be subsequently auto run.<br \/>\nYou might like to check the code and add appropriate try\/catch type clauses if appropriate.<br \/>\nTo re-enable auto-running simply re-publish the code.<\/p>\n<\/p>\n\n","changelog":"<h4>1.0.1<\/h4>\n<p>Release Date: 1st July 2020<\/p>\n<ul>\n<li>[Initial Release]<\/li>\n<\/ul>\n","screenshots":"<ol><li><a href=\"https:\/\/ps.w.org\/acb-scratchpad\/assets\/screenshot-1.png?rev=2426002\"><img src=\"https:\/\/ps.w.org\/acb-scratchpad\/assets\/screenshot-1.png?rev=2426002\" alt=\"Adding some icons and testing a JS regex\"><\/a><p>Adding some icons and testing a JS regex<\/p><\/li><\/ol>","reviews":""},"download_link":"https:\/\/downloads.wordpress.org\/plugin\/acb-scratchpad.1.0.0.zip","screenshots":{"1":{"src":"https:\/\/ps.w.org\/acb-scratchpad\/assets\/screenshot-1.png?rev=2426002","caption":"Adding some icons and testing a JS regex"}},"tags":{"code":"code","codepad":"codepad","php":"php","plugins":"plugins","testpad":"testpad"},"versions":{"1.0.0":"https:\/\/downloads.wordpress.org\/plugin\/acb-scratchpad.1.0.0.zip","trunk":"https:\/\/downloads.wordpress.org\/plugin\/acb-scratchpad.zip"},"donate_link":"","banners":[]}