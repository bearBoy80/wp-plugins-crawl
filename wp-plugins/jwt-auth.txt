{"name":"JWT Auth &#8211; WordPress JSON Web Token Authentication","slug":"jwt-auth","version":"2.1.6","author":"<a href=\"https:\/\/usefulteam.com\">Useful Team<\/a>","author_profile":"https:\/\/profiles.wordpress.org\/contactjavas\/","contributors":{"contactjavas":{"profile":"https:\/\/profiles.wordpress.org\/contactjavas\/","avatar":"https:\/\/secure.gravatar.com\/avatar\/666df479a2f94362eb6b41e60a3dd1fe?s=96&d=monsterid&r=g","display_name":"Bagus"},"tha_sun":{"profile":"https:\/\/profiles.wordpress.org\/tha_sun\/","avatar":"https:\/\/secure.gravatar.com\/avatar\/87c0661673958586917088437c9326a8?s=96&d=monsterid&r=g","display_name":"sun"},"dominic_ks":{"profile":"https:\/\/profiles.wordpress.org\/dominic_ks\/","avatar":"https:\/\/secure.gravatar.com\/avatar\/ddf627ade7b00cb2c461c7a31e5cf425?s=96&d=monsterid&r=g","display_name":"dominic_ks"}},"requires":"5.2","tested":"6.1.4","requires_php":"7.2","requires_plugins":[],"rating":100,"ratings":{"5":21,"4":0,"3":0,"2":0,"1":0},"num_ratings":21,"support_threads":3,"support_threads_resolved":0,"active_installs":5000,"last_updated":"2023-10-26 1:12pm GMT","added":"2020-05-05","homepage":"https:\/\/github.com\/usefulteam\/jwt-auth","sections":{"description":"<p>WordPress JSON Web Token Authentication allows you to do REST API authentication via token. It is a simple, non-complex, and easy to use. This plugin probably is the most convenient way to do JWT Authentication in WordPress.<\/p>\n<ul>\n<li>Support &amp; question: <a href=\"https:\/\/wordpress.org\/support\/plugin\/jwt-auth\/\" rel=\"ugc\">WordPress support forum<\/a><\/li>\n<li>Reporting plugin&#8217;s bug: <a href=\"https:\/\/github.com\/usefulteam\/jwt-auth\/issues\" rel=\"nofollow ugc\">GitHub issues tracker<\/a><\/li>\n<li><a href=\"https:\/\/discord.gg\/DgECpEg\" rel=\"nofollow ugc\">Discord channel<\/a> also available for faster response.<\/li>\n<\/ul>\n<h3>IMPORTANT INFORMATION FOR V3.x+<\/h3>\n<p><a href=\"https:\/\/github.com\/usefulteam\/jwt-auth\/\" rel=\"nofollow ugc\">The latest version<\/a> of this plugin will soon be released on the WordPress.org plugin repo.<\/p>\n<p>If you are updating from V2.x to V3.x you should familiarise yourself with the upcoming changes to ensure that your site continues to work as you expect it to.<\/p>\n<p>There are two imoportant changes:<\/p>\n<h4>Introduction of refresh tokens<\/h4>\n<p><a href=\"https:\/\/github.com\/usefulteam\/jwt-auth#refreshing-the-access-token\" rel=\"nofollow ugc\">See this section of the readme on GitHub<\/a><\/p>\n<p>Key changes:<\/p>\n<ul>\n<li>Default JWT expiry time will reduce from 7 days to 10 minutes.<\/li>\n<li>On expiry of a JWT, your client will need to manage getting a new token using the <a href=\"https:\/\/github.com\/usefulteam\/jwt-auth#refreshing-the-access-token\" rel=\"nofollow ugc\">refresh token process described here<\/a>.<\/li>\n<li>If you would prefer to retain the 7 day expiry time initially or permanently, you can use the <code>jwt_auth_expire<\/code> hook as documented on this page to force the expiry time to remain at 7 days.<\/li>\n<\/ul>\n<h4>Removal of the URL whitelist and related filter<\/h4>\n<p>Key changes:<\/p>\n<ul>\n<li>Users of this plugin will no longer need to whitelist the REST paths from other plugins using the  <code>jwt_auth_whitelist<\/code> as documented on this page.<\/li>\n<li>Instead, custom API routes should have the permissions requirement coded via the <a href=\"https:\/\/developer.wordpress.org\/rest-api\/extending-the-rest-api\/adding-custom-endpoints\/#permissions-callback\" rel=\"nofollow ugc\">permissions callback<\/a> of the REST API route when it is registered.<\/li>\n<li>This means that if a route requires authentication, any authentication method can be used and should reduce conflicts between this and other plugins.<\/li>\n<li>For further information please see <a href=\"https:\/\/github.com\/usefulteam\/jwt-auth\/pull\/60\" rel=\"nofollow ugc\">this discussion<\/a> on GitHub.<\/li>\n<\/ul>\n<h3>Enable PHP HTTP Authorization Header<\/h3>\n<h4>Shared Hosts<\/h4>\n<p>Most shared hosts have disabled the <strong>HTTP Authorization Header<\/strong> by default.<\/p>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess<\/strong> file by adding the following:<\/p>\n<pre><code>RewriteEngine on\nRewriteCond %{HTTP:Authorization} ^(.*)\nRewriteRule ^(.*) - [E=HTTP_AUTHORIZATION:%1]\n<\/code><\/pre>\n<h4>WPEngine<\/h4>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess<\/strong> file by adding the following (see <a href=\"https:\/\/github.com\/Tmeister\/wp-api-jwt-auth\/issues\/1\" rel=\"nofollow ugc\">this issue<\/a>):<\/p>\n<pre><code>SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n<\/code><\/pre>\n<h3>Configuration<\/h3>\n<h4>Configurate the Secret Key<\/h4>\n<p>The JWT needs a <strong>secret key<\/strong> to sign the token. This <strong>secret key<\/strong> must be unique and never be revealed.<\/p>\n<p>To add the <strong>secret key<\/strong>, edit your wp-config.php file and add a new constant called <strong>JWT_AUTH_SECRET_KEY<\/strong>.<\/p>\n<pre><code>define('JWT_AUTH_SECRET_KEY', 'your-top-secret-key');\n<\/code><\/pre>\n<p>You can use a string from <a href=\"https:\/\/api.wordpress.org\/secret-key\/1.1\/salt\/\" rel=\"nofollow ugc\">here<\/a><\/p>\n<h4>Configurate CORs Support<\/h4>\n<p>This plugin has the option to activate <a href=\"https:\/\/en.wikipedia.org\/wiki\/Cross-origin_resource_sharing\" rel=\"nofollow ugc\">CORs<\/a> support.<\/p>\n<p>To enable the CORs Support edit your wp-config.php file and add a new constant called <strong>JWT_AUTH_CORS_ENABLE<\/strong><\/p>\n<pre><code>define('JWT_AUTH_CORS_ENABLE', true);\n<\/code><\/pre>\n<h3>Namespace and Endpoints<\/h3>\n<p>When the plugin is activated, a new namespace is added.<\/p>\n<pre><code>\/jwt-auth\/v1\n<\/code><\/pre>\n<p>Also, two new <em>POST<\/em> endpoints are added to this namespace.<\/p>\n<pre><code>\/wp-json\/jwt-auth\/v1\/token\n\/wp-json\/jwt-auth\/v1\/token\/validate\n<\/code><\/pre>\n<h3>Requesting\/ Generating Token<\/h3>\n<pre><code>\/wp-json\/jwt-auth\/v1\/token\n<\/code><\/pre>\n<p>To generate token, submit a POST request to this endpoint. With <code>username<\/code> and <code>password<\/code> as the parameters.<\/p>\n<p>It will validates the user credentials, and returns success response including a token if the authentication is correct or returns an error response if the authentication is failed.<\/p>\n<h4>Sample of success response when trying to generate token:<\/h4>\n<pre><code>{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"code\": \"jwt_auth_valid_credential\",\n    \"message\": \"Credential is valid\",\n    \"data\": {\n        \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvcG9pbnRzLmNvdXZlZS5jby5pZCIsImlhdCI6MTU4ODQ5OTE0OSwibmJmIjoxNTg4NDk5MTQ5LCJleHAiOjE1ODkxMDM5NDksImRhdGEiOnsidXNlciI6eyJpZCI6MX19fQ.w3pf5PslhviHohmiGF-JlPZV00XWE9c2MfvBK7Su9Fw\",\n        \"id\": 1,\n        \"email\": \"contactjavas@gmail.com\",\n        \"nicename\": \"contactjavas\",\n        \"firstName\": \"Bagus Javas\",\n        \"lastName\": \"Heruyanto\",\n        \"displayName\": \"contactjavas\"\n    }\n}\n<\/code><\/pre>\n<h4>Sample of error response when trying to generate token:<\/h4>\n<pre><code>{\n    \"success\": false,\n    \"statusCode\": 403,\n    \"code\": \"invalid_username\",\n    \"message\": \"Unknown username. Try again or check your email address.\",\n    \"data\": []\n}\n<\/code><\/pre>\n<p>Once you get the token, you must store it somewhere in your application. It can be:<br \/>\n&#8211; using <strong>cookie<\/strong><br \/>\n&#8211; or using <strong>localstorage<\/strong><br \/>\n&#8211; or using a wrapper like <a href=\"https:\/\/localforage.github.io\/localForage\/\" rel=\"nofollow ugc\">localForage<\/a> or <a href=\"https:\/\/pouchdb.com\/\" rel=\"nofollow ugc\">PouchDB<\/a><br \/>\n&#8211; or using local database like SQLite or <a href=\"https:\/\/docs.hivedb.dev\/#\/\" rel=\"nofollow ugc\">Hive<\/a><br \/>\n&#8211; or your choice based on app you develop \ud83d\ude09<\/p>\n<p>Then you should pass this token as <em>Bearer Authentication<\/em> header to every API call. The header format is:<\/p>\n<pre><code>Authorization: Bearer your-generated-token\n<\/code><\/pre>\n<p>and here&#8217;s an example:<\/p>\n<pre><code>\"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvcG9pbnRzLmNvdXZlZS5jby5pZCIsImlhdCI6MTU4ODQ5OTE0OSwibmJmIjoxNTg4NDk5MTQ5LCJleHAiOjE1ODkxMDM5NDksImRhdGEiOnsidXNlciI6eyJpZCI6MX19fQ.w3pf5PslhviHohmiGF-JlPZV00XWE9c2MfvBK7Su9Fw\";\n<\/code><\/pre>\n<p>The <strong>jwt-auth<\/strong> will intercept every call to the server and will look for the authorization header, if the authorization header is present, it will try to decode the token and will set the user according with the data stored in it.<\/p>\n<p>If the token is valid, the API call flow will continue as always.<\/p>\n<h3>Whitelisting Endpoints<\/h3>\n<p>Every call to the server (except the token creation some default whitelist) will be intercepted. However, you might need to whitelist some endpoints. You can use <code>jwt_auth_whitelist<\/code> filter to do it. Please simply add this filter directly (without hook). Or, you can add it to <code>plugins_loaded<\/code>. Adding this filter inside <code>init<\/code> (or later) will not work.<\/p>\n<p>If you&#8217;re adding the filter inside theme and the whitelisting doesn&#8217;t work, please create a small 1 file plugin and add your filter there.<\/p>\n<pre><code>add_filter( 'jwt_auth_whitelist', function ( $endpoints ) {\n    $your_endpoints = array(\n        '\/wp-json\/custom\/v1\/webhook\/*',\n        '\/wp-json\/custom\/v1\/otp\/*',\n        '\/wp-json\/custom\/v1\/account\/check',\n        '\/wp-json\/custom\/v1\/register',\n    );\n\n    return array_unique( array_merge( $endpoints, $your_endpoints ) );\n} );\n<\/code><\/pre>\n<h3>Default Whitelisted Endpoints<\/h3>\n<p>We whitelist some endpoints by default. This is to prevent error regarding WordPress &amp; WooCommerce. These are the default whitelisted endpoints (without trailing <em>&#042;<\/em> char):<\/p>\n<pre><code>\/\/ Whitelist some endpoints by default (without trailing * char).\n$default_whitelist = array(\n    \/\/ WooCommerce namespace.\n    $rest_api_slug . '\/wc\/',\n    $rest_api_slug . '\/wc-auth\/',\n    $rest_api_slug . '\/wc-analytics\/',\n\n    \/\/ WordPress namespace.\n    $rest_api_slug . '\/wp\/v2\/',\n);\n<\/code><\/pre>\n<p>You might want to <strong>remove<\/strong> or modify the existing <strong>default whitelist<\/strong>. You can use <code>jwt_auth_default_whitelist<\/code> filter to do it. Please simply add this filter directly (without hook). Or, you can add it to <code>plugins_loaded<\/code>. Adding this filter inside <code>init<\/code> (or later) will not work.<\/p>\n<p>If you&#8217;re adding the filter inside theme and the it doesn&#8217;t work, please create a small 1 file plugin and add your filter there. It should fix the issue.<\/p>\n<pre><code>add_filter( 'jwt_auth_default_whitelist', function ( $default_whitelist ) {\n    \/\/ Modify the $default_whitelist here.\n    return $default_whitelist;\n} );\n<\/code><\/pre>\n<h3>Validating Token<\/h3>\n<p>You likely <strong>don&#8217;t need<\/strong> to validate the token your self. The plugin handle it for you like explained above.<\/p>\n<p>But if you want to test or validate the token manually, then send a <strong>POST<\/strong> request to this endpoint (don&#8217;t forget to set your <em>Bearer Authorization<\/em> header):<\/p>\n<pre><code>\/wp-json\/jwt-auth\/v1\/token\/validate\n<\/code><\/pre>\n<h4>Valid Token Response:<\/h4>\n<pre><code>{\n    \"success\": true,\n    \"statusCode\": 200,\n    \"code\": \"jwt_auth_valid_token\",\n    \"message\": \"Token is valid\",\n    \"data\": []\n}\n<\/code><\/pre>\n<h3>Errors<\/h3>\n<p>If the token is invalid an error will be returned. Here are some samples of errors:<\/p>\n<h4>No Secret Key<\/h4>\n<pre><code>{\n    \"success\": false,\n    \"statusCode\": 403,\n    \"code\": \"jwt_auth_bad_config\",\n    \"message\": \"JWT is not configured properly.\",\n    \"data\": []\n}\n<\/code><\/pre>\n<h4>No HTTP_AUTHORIZATION Header<\/h4>\n<pre><code>{\n    \"success\": false,\n    \"statusCode\": 403,\n    \"code\": \"jwt_auth_no_auth_header\",\n    \"message\": \"Authorization header not found.\",\n    \"data\": []\n}\n<\/code><\/pre>\n<h4>Bad Iss<\/h4>\n<pre><code>{\n    \"success\": false,\n    \"statusCode\": 403,\n    \"code\": \"jwt_auth_bad_iss\",\n    \"message\": \"The iss do not match with this server.\",\n    \"data\": []\n}\n<\/code><\/pre>\n<h4>Invalid Signature<\/h4>\n<pre><code>{\n    \"success\": false,\n    \"statusCode\": 403,\n    \"code\": \"jwt_auth_invalid_token\",\n    \"message\": \"Signature verification failed\",\n    \"data\": []\n}\n<\/code><\/pre>\n<h4>Bad Request<\/h4>\n<pre><code>{\n    \"success\": false,\n    \"statusCode\": 403,\n    \"code\": \"jwt_auth_bad_request\",\n    \"message\": \"User ID not found in the token.\",\n    \"data\": []\n}\n<\/code><\/pre>\n<h4>User Not Found<\/h4>\n<pre><code>{\n    \"success\": false,\n    \"statusCode\": 403,\n    \"code\": \"jwt_auth_user_not_found\",\n    \"message\": \"User doesn't exist\",\n    \"data\": []\n}\n<\/code><\/pre>\n<h4>Expired Token<\/h4>\n<pre><code>{\n    \"success\": false,\n    \"statusCode\": 403,\n    \"code\": \"jwt_auth_invalid_token\",\n    \"message\": \"Expired token\",\n    \"data\": []\n}\n<\/code><\/pre>\n<h3>Available Filter Hooks<\/h3>\n<p><strong>JWT Auth<\/strong> is developer friendly and has some filters available to override the default settings.<\/p>\n<h4>jwt_auth_cors_allow_headers<\/h4>\n<p>The <code>jwt_auth_cors_allow_headers<\/code> allows you to modify the available headers when the CORs support is enabled.<\/p>\n<p>Default Value:<\/p>\n<pre><code>'X-Requested-With, Content-Type, Accept, Origin, Authorization'\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>\/**\n * Change the allowed CORS headers.\n *\n * @param string $headers The allowed headers.\n * @return string The allowed headers.\n *\/\nadd_filter(\n    'jwt_auth_cors_allow_headers',\n    function ( $headers ) {\n        \/\/ Modify the headers here.\n        return $headers;\n    }\n);\n<\/code><\/pre>\n<h4>jwt_auth_iss<\/h4>\n<p>The <strong>jwt_auth_iss<\/strong> allows you to change the <a href=\"https:\/\/tools.ietf.org\/html\/rfc7519#section-4.1.1\" rel=\"nofollow ugc\"><strong>iss<\/strong><\/a> value before the payload is encoded to be a token.<\/p>\n<p>Default Value:<\/p>\n<pre><code>get_bloginfo( 'url' )\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>\/**\n * Change the token issuer.\n *\n * @param string $iss The token issuer.\n * @return string The token issuer.\n *\/\nadd_filter(\n    'jwt_auth_iss',\n    function ( $iss ) {\n        \/\/ Modify the \"iss\" here.\n        return $iss;\n    }\n);\n<\/code><\/pre>\n<h4>jwt_auth_not_before<\/h4>\n<p>The <code>jwt_auth_not_before<\/code> allows you to change the <a href=\"https:\/\/tools.ietf.org\/html\/rfc7519#section-4.1.5\" rel=\"nofollow ugc\"><strong>nbf<\/strong><\/a> value before the payload is encoded to be a token.<\/p>\n<p>Default Value:<\/p>\n<pre><code>\/\/ Creation time.\ntime()\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>\/**\n * Change the token's nbf value.\n *\n * @param int $not_before The default \"nbf\" value in timestamp.\n * @param int $issued_at The \"iat\" value in timestamp.\n *\n * @return int The \"nbf\" value.\n *\/\nadd_filter(\n    'jwt_auth_not_before',\n    function ( $not_before, $issued_at ) {\n        \/\/ Modify the \"not_before\" here.\n        return $not_before;\n    },\n    10,\n    2\n);\n<\/code><\/pre>\n<h4>jwt_auth_expire<\/h4>\n<p>The <code>jwt_auth_expire<\/code> allows you to change the value <a href=\"https:\/\/tools.ietf.org\/html\/rfc7519#section-4.1.4\" rel=\"nofollow ugc\"><strong>exp<\/strong><\/a> before the payload is encoded to be a token.<\/p>\n<p>Default Value:<\/p>\n<pre><code>time() + (DAY_IN_SECONDS * 7)\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>\/**\n * Change the token's expire value.\n *\n * @param int $expire The default \"exp\" value in timestamp.\n * @param int $issued_at The \"iat\" value in timestamp.\n *\n * @return int The \"nbf\" value.\n *\/\nadd_filter(\n    'jwt_auth_expire',\n    function ( $expire, $issued_at ) {\n        \/\/ Modify the \"expire\" here.\n        return $expire;\n    },\n    10,\n    2\n);\n<\/code><\/pre>\n<h4>jwt_auth_alg<\/h4>\n<p>The <code>jwt_auth_alg<\/code> allows you to change the supported signing <a href=\"https:\/\/tools.ietf.org\/html\/draft-ietf-jose-json-web-algorithms-40\" rel=\"nofollow ugc\">algorithm<\/a> for your application.<\/p>\n<p>Default Value:<\/p>\n<pre><code>'HS256'\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>\/**\n * Change the token's signing algorithm.\n *\n * @param string $alg The default supported signing algorithm.\n * @return string The supported signing algorithm.\n *\/\nadd_filter(\n    'jwt_auth_alg',\n    function ( $alg ) {\n        \/\/ Change the signing algorithm here.\n        return $alg;\n    }\n);\n<\/code><\/pre>\n<h4>jwt_auth_payload<\/h4>\n<p>The <code>jwt_auth_payload<\/code> allows you to modify all the payload \/ token data before being encoded and signed.<\/p>\n<p>Default value:<\/p>\n<pre><code>&lt;?php\n$token = array(\n    'iss' =&gt; get_bloginfo('url'),\n    'iat' =&gt; $issued_at,\n    'nbf' =&gt; $not_before,\n    'exp' =&gt; $expire,\n    'data' =&gt; array(\n        'user' =&gt; array(\n            'id' =&gt; $user-&gt;ID,\n        )\n    )\n);\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>\/**\n * Modify the payload\/ token's data before being encoded &amp; signed.\n *\n * @param array $payload The default payload\n * @param WP_User $user The authenticated user.\n * .\n * @return array The payload\/ token's data.\n *\/\nadd_filter(\n    'jwt_auth_payload',\n    function ( $payload, $user ) {\n        \/\/ Modify the payload here.\n        return $payload;\n    },\n    10,\n    2\n);\n<\/code><\/pre>\n<h4>jwt_auth_valid_credential_response<\/h4>\n<p>The <code>jwt_auth_valid_credential_response<\/code> allows you to modify the valid credential response when generating a token.<\/p>\n<p>Default value:<\/p>\n<pre><code>&lt;?php\n$response = array(\n    'success'    =&gt; true,\n    'statusCode' =&gt; 200,\n    'code'       =&gt; 'jwt_auth_valid_credential',\n    'message'    =&gt; __( 'Credential is valid', 'jwt-auth' ),\n    'data'       =&gt; array(\n        'token'       =&gt; $token,\n        'id'          =&gt; $user-&gt;ID,\n        'email'       =&gt; $user-&gt;user_email,\n        'nicename'    =&gt; $user-&gt;user_nicename,\n        'firstName'   =&gt; $user-&gt;first_name,\n        'lastName'    =&gt; $user-&gt;last_name,\n        'displayName' =&gt; $user-&gt;display_name,\n    ),\n);\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>\/**\n * Modify the response of valid credential.\n *\n * @param array $response The default valid credential response.\n * @param WP_User $user The authenticated user.\n * .\n * @return array The valid credential response.\n *\/\nadd_filter(\n    'jwt_auth_valid_credential_response',\n    function ( $response, $user ) {\n        \/\/ Modify the response here.\n        return $response;\n    },\n    10,\n    2\n);\n<\/code><\/pre>\n<h3>jwt_auth_valid_token_response<\/h3>\n<p>The <strong>jwt_auth_valid_token_response<\/strong> allows you to modify the valid token response when validating a token.<\/p>\n<p>Default value:<\/p>\n<pre><code>&lt;?php\n$response = array(\n    'success'    =&gt; true,\n    'statusCode' =&gt; 200,\n    'code'       =&gt; 'jwt_auth_valid_token',\n    'message'    =&gt; __( 'Token is valid', 'jwt-auth' ),\n    'data'       =&gt; array(),\n);\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>\/**\n * Modify the response of valid token.\n *\n * @param array $response The default valid token response.\n * @param WP_User $user The authenticated user.\n * @param string $token The raw token.\n * @param array $payload The token data.\n * .\n * @return array The valid token response.\n *\/\nadd_filter(\n    'jwt_auth_valid_token_response',\n    function ( $response, $user, $token, $payload ) {\n        \/\/ Modify the response here.\n        return $response;\n    },\n    10,\n    4\n);\n<\/code><\/pre>\n<h3>jwt_auth_extra_token_check<\/h3>\n<p>The <strong>jwt_auth_extra_token_check<\/strong> allows you to add extra criterias to validate the token. If empty, has no problem to proceed. Use empty value to bypass the filter. Any other value will block the token access and returns response with code <code>jwt_auth_obsolete_token<\/code>.<\/p>\n<p>Default value:<\/p>\n<pre><code>''\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>\/**\n * Modify the validation of token. No-empty values block token validation.\n *\n * @param array $response An empty value ''.\n * @param WP_User $user The authenticated user.\n * @param string $token The raw token.\n * @param array $payload The token data.\n * .\n * @return array The valid token response.\n *\/\nadd_filter(\n    'jwt_auth_extra_token_check',\n    function ( $response, $user, $token, $payload ) {\n        \/\/ Modify the response here.\n        return $response;\n    },\n    10,\n    4\n);\n<\/code><\/pre>\n<h3>Credits<\/h3>\n<p><a href=\"https:\/\/github.com\/firebase\/php-jwt\" rel=\"nofollow ugc\">PHP-JWT from firebase<\/a><br \/>\n<a href=\"https:\/\/wordpress.org\/plugins\/jwt-authentication-for-wp-rest-api\/\" rel=\"ugc\">JWT Authentication for WP REST API<\/a><br \/>\n<a href=\"https:\/\/github.com\/pesseba\" rel=\"nofollow ugc\">Devices utility by pesseba<\/a><br \/>\nThe <a href=\"https:\/\/github.com\/usefulteam\/jwt-auth\/collaborators\" rel=\"nofollow ugc\">awesome maintainers<\/a> and <a href=\"https:\/\/github.com\/usefulteam\/jwt-auth\/graphs\/contributors\" rel=\"nofollow ugc\">contributors<\/a><\/p>\n","installation":"<p><strong>Enable PHP HTTP Authorization Header<\/strong><\/p>\n<h4>Shared Hosts<\/h4>\n<p>Most shared hosts have disabled the <strong>HTTP Authorization Header<\/strong> by default.<\/p>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess<\/strong> file by adding the following:<\/p>\n<pre><code>RewriteEngine on\nRewriteCond %{HTTP:Authorization} ^(.*)\nRewriteRule ^(.*) - [E=HTTP_AUTHORIZATION:%1]\n<\/code><\/pre>\n<h4>WPEngine<\/h4>\n<p>To enable this option you&#8217;ll need to edit your <strong>.htaccess<\/strong> file by adding the following (see <a href=\"https:\/\/github.com\/Tmeister\/wp-api-jwt-auth\/issues\/1\" rel=\"nofollow ugc\">this issue<\/a>):<\/p>\n<pre><code>SetEnvIf Authorization \"(.*)\" HTTP_AUTHORIZATION=$1\n<\/code><\/pre>\n<h4>Installing Through the WordPress Administrative Area:<\/h4>\n<ul>\n<li>From WordPress administrative area, go to Plugins -&gt; Add New<\/li>\n<li>Search for <em>JWT Auth<\/em><\/li>\n<li>Install it<\/li>\n<li>Easily configure it (see &#8220;Configuration&#8221; below)<\/li>\n<li>and then activate it<\/li>\n<\/ul>\n<h4>Installing by Downloading Manually:<\/h4>\n<ul>\n<li>Download the plugin from <a href=\"https:\/\/wordpress.org\/plugins\/jwt-auth\/\" rel=\"ugc\">WordPress plugins page<\/a><\/li>\n<li>Upload to your wp-content directory<\/li>\n<li>Easily configure it (see &#8220;Configuration&#8221; below)<\/li>\n<li>Activate it from <em>Plugins<\/em> menu in admin area<\/li>\n<\/ul>\n<p><strong>Configuration<\/strong><\/p>\n<h4>Configurate the Secret Key<\/h4>\n<p>The JWT needs a <strong>secret key<\/strong> to sign the token. It must be unique and never be revealed.<\/p>\n<p>To add the <strong>secret key<\/strong>, edit your wp-config.php file and add a new constant called <strong>JWT_AUTH_SECRET_KEY<\/strong>.<\/p>\n<pre><code>define('JWT_AUTH_SECRET_KEY', 'your-top-secret-key');\n<\/code><\/pre>\n<p>You can use a string from <a href=\"https:\/\/api.wordpress.org\/secret-key\/1.1\/salt\/\" rel=\"nofollow ugc\">here<\/a><\/p>\n<h4>Configurate CORs Support<\/h4>\n<p>This plugin has the option to enable <a href=\"https:\/\/en.wikipedia.org\/wiki\/Cross-origin_resource_sharing\" rel=\"nofollow ugc\">CORs<\/a> support.<\/p>\n<p>To enable the CORs Support edit your wp-config.php file and add a new constant called <strong>JWT_AUTH_CORS_ENABLE<\/strong><\/p>\n<pre><code>define('JWT_AUTH_CORS_ENABLE', true);\n<\/code><\/pre>\n<p>Finally activate the plugin within the plugin dashboard.<\/p>\n","faq":"\n<dt id='now%20almost%20all%20rest%20routes%20are%20intercepted.%20how%20to%20exclude%20some%20routes%2F%20endpoints%3F'>\nNow almost all REST routes are intercepted. How to exclude some routes\/ endpoints?\n<\/h4>\n<p>\n<p>There&#8217;s <code>jwt_auth_whitelist<\/code> that you can use to whitelist specific endpoints. For more information, pease read <strong>Whitelisting Endpoints<\/strong> section in the Description tab.<\/p>\n<\/p>\n<dt id='do%20you%20have%20github%20repository%20for%20this%20plugin%3F'>\nDo you have GitHub repository for this plugin?\n<\/h4>\n<p>\n<p>You can visit the GitHub repository <a href=\"https:\/\/github.com\/usefulteam\/jwt-auth\/\" rel=\"nofollow ugc\">here<\/a><\/p>\n<\/p>\n<dt id='i%20use%20this%20plugin%20on%20my%20projects.%20i%20want%20this%20plugin%20to%20keep%20alive%20and%20maintained%2C%20how%20can%20i%20help%3F'>\nI use this plugin on my projects. I want this plugin to keep alive and maintained, how can i help?\n<\/h4>\n<p>\n<p>You can help this plugin stay alive and maintained by giving <strong>5 Stars<\/strong> Rating\/ Review or donating me via:<br \/>\n&#8211; <a href=\"https:\/\/paypal.me\/bagusjavas\" rel=\"nofollow ugc\">PayPal<\/a><\/p>\n<\/p>\n\n","changelog":"<h4>2.1.6<\/h4>\n<ul>\n<li>Added automated asset updates from GitHub<\/li>\n<\/ul>\n<h4>2.1.5<\/h4>\n<ul>\n<li>Removed dev and build files from distribution<\/li>\n<\/ul>\n<h4>2.1.4<\/h4>\n<ul>\n<li>Added update warning and information relevant to updating to version 3.x+<\/li>\n<\/ul>\n<h4>2.1.3<\/h4>\n<ul>\n<li>Fix some missing composer files in 2.1.2.<\/li>\n<\/ul>\n<h4>2.1.2<\/h4>\n<ul>\n<li>Updated to fix a number of issues highlighted by wpcs.<\/li>\n<\/ul>\n<h4>2.1.1<\/h4>\n<ul>\n<li>Updated firebase\/php-jwt to 6.3 to address security issue in versions prior to 6.x.<\/li>\n<\/ul>\n<h4>2.1.0<\/h4>\n<ul>\n<li>It&#8217;s possible now to whitelist an endpoint with specific method (GET\/POST). See <a href=\"https:\/\/github.com\/usefulteam\/jwt-auth\/pull\/47\" rel=\"nofollow ugc\">PR #47<\/a><\/li>\n<\/ul>\n<h4>2.0.0<\/h4>\n<ul>\n<li>Breaking change: rename <code>jwt_auth_valid_token_extra<\/code> filter to <code>jwt_auth_extra_token_check<\/code>. Please check if you use this filter.<\/li>\n<li>Breaking bugfix: the actual http statusCode didn&#8217;t follow the response statusCode. Now the actual http statusCode follows the response statusCode.<\/li>\n<li>New feature: connected device. Thanks @pesseba.<\/li>\n<li>Might be a breaking change: Add WordPress &amp; WC default endpoints to <code>jwt_auth_default_whitelist<\/code> to prevent error when visiting WordPress admin area.<\/li>\n<li>Documentation: prevent misleading example by updating the <code>jwt_auth_whitelist<\/code> usage.<\/li>\n<\/ul>\n<h4>1.4.2<\/h4>\n<ul>\n<li>Bugfix: add <code>permission_callback<\/code> argument since it&#8217;s required in WP 5.5<\/li>\n<\/ul>\n<h4>1.4.1<\/h4>\n<ul>\n<li>Bugfix: the previous <code>\/wp-json\/wp\/v2\/*<\/code> whitelisting didn&#8217;t work. It should be <code>\/wp-json\/wp\/v2\/<\/code> (without the star char).<\/li>\n<\/ul>\n<h4>1.4.0<\/h4>\n<ul>\n<li>Whitelist <code>\/wp-json\/wp\/v2\/*<\/code> by default. This will prevent the plugin from breaking the default WordPress administration (gutenberg, etc).<\/li>\n<li>Bugfix: fix the problem with WordPress subdir installation. <a href=\"https:\/\/github.com\/usefulteam\/jwt-auth\/issues\/2\" rel=\"nofollow ugc\">See issue<\/a>.<\/li>\n<\/ul>\n<h4>1.3.0<\/h4>\n<ul>\n<li><strong>Filter Change<\/strong>: <code>jwt_auth_valid_token_response<\/code> should only filter the $response array instead of the whole <code>WP_REST_Response<\/code>. Please check if you use this filter \ud83d\ude42<\/li>\n<li>README update about <code>jwt_auth_whitelist<\/code> filter usage. That filter should be added directly (without hook) OR inside <code>plugins_loaded<\/code>. Adding it to <code>init<\/code> (or after that) will not work.<\/li>\n<\/ul>\n<h4>1.2.0<\/h4>\n<ul>\n<li><strong>Critical Bugfix<\/strong>: WooCommerce admin breaks. With this change, WooCommerce admin should be good.<\/li>\n<li>New Filter: We whitelist some endpoints by default to support common plugin like WooCommerce. These default whitelisted endpoints are change-able via <code>jwt_auth_default_whitelist<\/code> filter.<\/li>\n<\/ul>\n<h4>1.1.0<\/h4>\n<ul>\n<li>Support WooCommerce by ignoring <code>\/wp-json\/wc\/<\/code> and <code>\/wp-json\/wc-auth\/<\/code> namespace. You can use <code>jwt_auth_whitelist<\/code> filter if you want to whiteist other endpoints. See <strong>Whitelisting Endpoints<\/strong> section in the description tab.<\/li>\n<\/ul>\n<h4>1.0.0<\/h4>\n<ul>\n<li><strong>Filter Change<\/strong>: Rename <code>jwt_auth_token_payload<\/code> filter to <code>jwt_auth_payload<\/code><\/li>\n<li><strong>Filter Change<\/strong>: Rename <code>jwt_auth_token_response<\/code> filter to <code>jwt_auth_valid_credential_response<\/code><\/li>\n<li><strong>Critical Bugfix<\/strong>: The auth only restricted wp-json\/jwt-auth\/v1\/* endpoints. So endpoints under other namespace were not restricted. With this change, other endpoints are restricted now. If you need to whitelist some endpoints, please read about <strong>Whitelisting Endpoints<\/strong> section in the description tab.<\/li>\n<li>New Filter: <code>jwt_auth_valid_token_response<\/code><\/li>\n<li>New Filter: Make possible to whitelist specific endpoints via <code>jwt_auth_whitelist<\/code> filter.<\/li>\n<li>New Filter: Make possible to change the token issuer by providing <code>jwt_auth_iss<\/code> filter.<\/li>\n<li>New Filter: Make possible to change the supported algorithm by providing <code>jwt_auth_alg<\/code> filter.<\/li>\n<li>New Filter: Make possible to change the valid token response by providing <code>jwt_auth_valid_token_response<\/code> filter.<\/li>\n<li>Add support for site with disabled permalink.<\/li>\n<\/ul>\n<h4>0.1.3<\/h4>\n<ul>\n<li>Add <code>jwt_auth_do_custom_auth<\/code> filter so that developer can use custom authentication like OTP authentication or any other.<\/li>\n<\/ul>\n<h4>0.1.2<\/h4>\n<ul>\n<li>Working version.<\/li>\n<\/ul>\n","reviews":"<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Good Work<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/gunberi\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/e6eaa6313aedb9f8b978ab8fc6510f52?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/e6eaa6313aedb9f8b978ab8fc6510f52?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/gunberi\/\" class=\"reviewer-name\">gunberi<\/a> on <span class=\"review-date\">September 13, 2023<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\"><!-- wp:paragraph -->\n<p class=\"\">The simplest and most useful plugin<\/p>\n<!-- \/wp:paragraph --><\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Perfect Plugin<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/wp3developers\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/e9baf991161cd6025f24288f7f9a0fcb?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/e9baf991161cd6025f24288f7f9a0fcb?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/wp3developers\/\" class=\"reviewer-name\">Gagan <small>(wp3developers)<\/small><\/a> on <span class=\"review-date\">August 10, 2023<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\"><!-- wp:paragraph -->\n<p class=\"\">Works perfect.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p class=\"\">Thank You!<\/p>\n<!-- \/wp:paragraph --><\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Awesome plugin<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/bilskirnir\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/d22fba9008d59a871f9a07f228c8a071?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/d22fba9008d59a871f9a07f228c8a071?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/bilskirnir\/\" class=\"reviewer-name\">bilskirnir<\/a> on <span class=\"review-date\">June 29, 2023<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\"><!-- wp:paragraph -->\n<p>Exactly what I was looking for<\/p>\n<!-- \/wp:paragraph --><\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">best jwt auth plugin<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/giulng\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/cce8fa13f11f7432d748cc043363c260?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/cce8fa13f11f7432d748cc043363c260?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/giulng\/\" class=\"reviewer-name\">Julian Lang <small>(giulng)<\/small><\/a> on <span class=\"review-date\">June 29, 2023<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\"><!-- wp:paragraph -->\n<p>works perfect, a lot of useful filters, no advertising or brand prefixes. you can transform your wp to a nice headless backend with this<\/p>\n<!-- \/wp:paragraph --><\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">works great<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/kheftel\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/b1c32cfaf8896202f34e556c42afed88?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/b1c32cfaf8896202f34e556c42afed88?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/kheftel\/\" class=\"reviewer-name\">kheftel<\/a> on <span class=\"review-date\">April 12, 2022<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\">allows me to use JWT authentication with WP REST API on wordpress 5.9.3, with one tweak for a host that strips authentication headers (not the plugin's fault)<\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">good !!<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/ahmedriyadh\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/24b09ac0b13b84248b654a501b860f55?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/24b09ac0b13b84248b654a501b860f55?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/ahmedriyadh\/\" class=\"reviewer-name\">Ahmed Hnewa <small>(ahmedriyadh)<\/small><\/a> on <span class=\"review-date\">February 9, 2021<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\">good plugin , but please stay this plugin updated\nit help me for make authentication on my androis app\nwith wordpress as backend\nthank you<\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Great<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/dovich\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/83ae1824cabebdd6bbc5eb667b86d93b?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/83ae1824cabebdd6bbc5eb667b86d93b?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/dovich\/\" class=\"reviewer-name\">dovich<\/a> on <span class=\"review-date\">December 9, 2020<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\">Thank You for this fork from old plugin that not supported for a long time. Amazing.<\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Good<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/ness\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/30f156d948c0dbd47c21adfa61ab932f?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/30f156d948c0dbd47c21adfa61ab932f?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/ness\/\" class=\"reviewer-name\">ness<\/a> on <span class=\"review-date\">December 1, 2020<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\">Good<\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Great. Just works.<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/jeswd\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/a7418a94aa8b46dbe9bdd3de1686a00e?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/a7418a94aa8b46dbe9bdd3de1686a00e?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/jeswd\/\" class=\"reviewer-name\">Jesse Sugden <small>(jeswd)<\/small><\/a> on <span class=\"review-date\">November 15, 2020<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\">No issues with this plugin. It just works.<\/div>\n<\/div>\n<div class=\"review\">\n\t<div class=\"review-head\">\n\t\t<div class=\"reviewer-info\">\n\t\t\t<div class=\"review-title-section\">\n\t\t\t\t<h4 class=\"review-title\">Amazing plugin<\/h4>\n\t\t\t\t<div class=\"star-rating\">\n\t\t\t\t<div class=\"wporg-ratings\" aria-label=\"5 out of 5 stars\" data-title-template=\"%s out of 5 stars\" data-rating=\"5\" style=\"color:#ffb900;\"><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><span class=\"star dashicons dashicons-star-filled\"><\/span><\/div>\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t<p class=\"reviewer\">\n\t\t\t\tBy <a href=\"https:\/\/profiles.wordpress.org\/mohamedfaragallah\/\"><img alt='' src='https:\/\/secure.gravatar.com\/avatar\/fb466bba848c6a31f74b40f4113cbd26?s=16&#038;d=monsterid&#038;r=g' srcset='https:\/\/secure.gravatar.com\/avatar\/fb466bba848c6a31f74b40f4113cbd26?s=32&#038;d=monsterid&#038;r=g 2x' class='avatar avatar-16 photo' height='16' width='16' loading='lazy' decoding='async'\/><\/a><a href=\"https:\/\/profiles.wordpress.org\/mohamedfaragallah\/\" class=\"reviewer-name\">Mohammed Faragallah <small>(mohamedfaragallah)<\/small><\/a> on <span class=\"review-date\">October 4, 2020<\/span>\t\t\t<\/p>\n\t\t<\/div>\n\t<\/div>\n\t<div class=\"review-body\">Thank you <\/div>\n<\/div>\n"},"download_link":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.2.1.6.zip","screenshots":[],"tags":{"json-web-token":"json web token","jwt":"jwt","jwt-auth":"jwt auth","token-authentication":"token authentication"},"versions":{"1.4.2":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.1.4.2.zip","2.0.0":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.2.0.0.zip","2.1.0":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.2.1.0.zip","2.1.1":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.2.1.1.zip","2.1.2":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.2.1.2.zip","2.1.3":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.2.1.3.zip","2.1.4":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.2.1.4.zip","2.1.5":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.2.1.5.zip","2.1.6":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.2.1.6.zip","3.0.1":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.3.0.1.zip","trunk":"https:\/\/downloads.wordpress.org\/plugin\/jwt-auth.zip"},"donate_link":"https:\/\/www.paypal.me\/bagusjavas","banners":{"low":"https:\/\/ps.w.org\/jwt-auth\/assets\/banner-772x250.png?rev=2298883","high":"https:\/\/ps.w.org\/jwt-auth\/assets\/banner-1544x500.png?rev=2298891"}}